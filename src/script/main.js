"use strict"; let canClick = !0; function buildCharacterList(e, a, t, n) {
    let i = document.getElementById(t); i.style.display = 0 !== e.length ? "" : "none", i.setAttribute("toggle", "false"); let r = document.getElementById(a); r.style.display = "none", i.classList.value.split(" ").includes("active") && i.classList.remove("active"), i.onclick = () => { let e = "false" === i.getAttribute("toggle"); i.setAttribute("toggle", `${e}`), r.style.display = e ? "" : "none", e ? i.classList.add("active") : i.classList.remove("active") }, i.getElementsByClassName("index")[0].innerHTML = `[${e.length}] ${n}`, e.forEach(e => {
        let a = document.createElement("div"); a.className = "charItem", a.setAttribute("type", "anime_char"), a.title = "Search this character on Google", a.innerHTML = `<img id="charPreview" src="${e.char.previewImage}">
            <div class="charInfo">
                <img class="gender" src="${e.char.isGirl ? "https://cdn-icons-png.flaticon.com/512/4022/4022596.png" : "https://cdn-icons-png.flaticon.com/512/8816/8816572.png"}">
                <a class="name">[${e.char.id}] ${e.char.name.full} <a class="inside">/ ${e.char.name.native}</a></a><br>
                <a class="info" ${e.char.dateOfBirth ? "" : 'style="display: none"'}>Birthday: ${e.char.dateOfBirth} - Age: ${e.char.age}<br></a>
                <a class="info" ${e.char.bloodType ? "" : 'style="display: none"'}>Bloodtype: ${e.char.bloodType}<br></a>
                <a class="info">Favourites: ${e.char.favourites}<br></a>
                ${e.voice.is_has_voice ? `<a class="info">Voice: <img style="width: 15px; height: 15px;" class="gender" src="${e.voice.isGirl ? "https://cdn-icons-png.flaticon.com/512/4022/4022596.png" : "https://cdn-icons-png.flaticon.com/512/8816/8816572.png"}"> [${e.voice.id}] ${e.voice.name.full} - ${e.voice.name.native}</a>
                </div>`: ""}`, a.onclick = () => { window.open(`https://www.google.com/search?q=${e.char.name.full}`) }, r.appendChild(a)
    })
} function AnalyzeChar(e) { let a = []; return e.forEach(e => { a.push({ char: { id: e.node.id, age: e.node.age ? e.node.age : "unknown", bloodType: e.node.bloodType, favourites: e.node.favourites, isGirl: "Female" === e.node.gender, dateOfBirth: e.node.dateOfBirth.day || e.node.dateOfBirth.month || e.node.dateOfBirth.year ? `${e.node.dateOfBirth.day}/${e.node.dateOfBirth.month}/${e.node.dateOfBirth.year}`.replace(/\/null/g, "") : "unknown", name: e.node.name, previewImage: e.node.image.large }, voice: { is_has_voice: e?.voiceActors[0]?.id !== void 0, id: e?.voiceActors[0]?.id, isGirl: e?.voiceActors[0]?.gender === "Female", name: e?.voiceActors[0]?.name } }) }), a } const getAnilistData = async e => (await (await fetch("https://graphql.anilist.co", { method: "POST", headers: { "Content-Type": "application/json", Accept: "application/json" }, body: JSON.stringify({ query: e }) })).json()).data.Media; async function getAllCharacter(e, a) { let t = 25, n = 0, i = []; for (; t >= 25;) { innerText("detect_api_fetching", `Processing data: ${e} - Amount: ${i.length}`); let r = (await getAnilistData(`query {Media (${"number" == typeof a ? `id: ${a}` : `search: "${a}"`}, type: ANIME){characters(role: ${e}, perPage: 25, page: ${n}){edges{role,voiceActors (language: JAPANESE){id,gender,name{full,native}},node{id,age,bloodType,favourites,gender,dateOfBirth{year,month,day},name{full,native},image{large}}}}}}`)).characters.edges; t = r.length, i = [...i, ...r], n++ } return i } const getAnimeInfoByID = async (e, a) => {
    try {
        if (!["number", "string"].includes(typeof e)) throw "ID is not a number or string!"; let t = a ? `query {
            Media (${"number" == typeof e ? `id: ${e}` : `search: "${e}"`}, type: ANIME){seasonYear,description,episodes,bannerImage,title{romaji},coverImage{large}}}` : `query{Media (${"number" == typeof e ? `id: ${e}` : `search: "${e}"`}, type: ANIME){title{romaji,english},description,studios{edges{id,isMain,node{name}}},source,episodes,seasonYear,trailer{id,site},averageScore,popularity,hashtag,id,coverImage{extraLarge}}}`; return a ? getAnilistData(t) : { info: await getAnilistData(t), mainChar: await getAllCharacter("MAIN", e), supoChar: await getAllCharacter("SUPPORTING", e), backChar: await getAllCharacter("BACKGROUND", e) }
    } catch (n) { console.error(n) }
}; let currAPIKey = 0; const apiKeyList = ["AIzaSyDXHeKauCPw25g0szqSm4_j6mC8Pu79csY", "AIzaSyCgRu_nOpvjhvay6jZmqfiTm6Re_Nsb5as", "AIzaSyBBMiW4e10NcKdBvPrqICpu5MX7_LD9hUI", "AIzaSyA-JilwxHUyuA6pL1URp63Gm1JhrpKPCxs", "AIzaSyDHMk5zsz_G2Yak5vov7KxMKfF_448IPBo", "AIzaSyCkqr8oAzETY5zj9nyN3YtoiAMNfhBmPRk", "AIzaSyCh-GCs52mqUAzj2kkoQoJw7T-5TDFm_XY", "AIzaSyACnAtMq8R89hN6xKegRi16yr0JP2E3zf4"], searchFandom = async e => { try { return (await (await fetch(`https://www.googleapis.com/customsearch/v1?q=anime fandom ${e}&key=${apiKeyList[currAPIKey]}&cx=122cd0496ab3640c3&num=1`)).json()).items[0].link } catch (a) { return currAPIKey++, searchFandom(e) } }, indexLoaded = []; let currentPageNow = 0; const loadPageList = async e => {
    currentPageNow = e; let a = await (await fetch("./src/data/aniInfo.json")).json(); for (let t of document.getElementById("animeList").getElementsByClassName("anime_item")) t.style.display = "none"; for (let n = 10 * e; n < (e + 1) * 10; n++)if (n < a.length) {
        if (indexLoaded.includes(n)) document.getElementById("animeList").querySelectorAll(`[index="${n}"]`)[0].style.display = ""; else {
            let i = await getAnimeInfoByID(a[n], !0), r = document.createElement("button"); r.className = "anime_item", r.style.display = 10 * currentPageNow <= n && n < (currentPageNow + 1) * 10 ? "" : "none", r.setAttribute("index", `${n}`), r.innerHTML = `${i.bannerImage ? `<div class="banner_image"><img class="bannerImage" src="${i.bannerImage}"></div>` : ""}
                <img class="anime_thumb"src="${i.coverImage.large}"><div class="anime_info"><div class="anime_name"><a>${i.title.romaji}</a></div><div class="anime_description"><a>${i.description}</a></div><div class="episodes"><a>Episodes: ${i.episodes} - Season Year: ${i.seasonYear}</a></div></div>`, indexLoaded.push(n), document.getElementById("animeList").appendChild(r), document.getElementById("animeList").appendChild(document.getElementById("changePage")), r.onclick = e => { canClick && loadInfoByIndex(n, !0) }
        }
    }
}; document.getElementById("closeButton").onclick = () => { for (let e of (document.getElementById("anime_full_detail").style.display = "none", document.getElementById("video_trailer").src = "", document.querySelectorAll('[type="anime_char"]'))) e.remove(); canClick = !0 }; const innerText = (e, a) => { document.getElementById(e).innerHTML = a }, loadInfoByIndex = async (e, a) => { try { document.getElementById("loading_screen").style.display = "", canClick = !1, innerText("detect_api_fetching", `Searching of '${e}'...`); let t = a ? await getAnimeInfoByID((await (await fetch("./src/data/aniInfo.json")).json())[e]) : await getAnimeInfoByID(e), n = t.info, i = [], r = []; n.studios.edges.forEach(e => { e.isMain ? i.push(e.node.name) : r.push(e.node.name) }), document.getElementById("preview_image").src = n.coverImage.extraLarge, innerText("anime_name", n.title.romaji), innerText("description", n.description), innerText("studio", i.join(", ")), innerText("producers", r.join(", ")), innerText("source", n.source), innerText("episodes", n.episodes), innerText("season", n.seasonYear), innerText("average_score", n.averageScore), innerText("popularity", n.popularity), innerText("hashtag", n.hashtag), innerText("anilistid", n.id), document.getElementById("hashtag").href = `https://twitter.com/search?q=${encodeURIComponent(n.hashtag)}&src=typed_query`, innerText("detect_api_fetching", "Searching for fandom..."); let l = new URL(await searchFandom(n.title.romaji)).origin; document.getElementById("setFandomURL").href = l, document.getElementById("fandomImage").src = `https://t2.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&size=64&url=${l}`, document.getElementById("setSpotifyURL").href = `https://open.spotify.com/search/${n.title.romaji}`, document.getElementById("setANiiX.TOSrc").href = `https://anix.to/filter?keyword=${n.title.romaji}`, document.getElementById("conglightnovelsearch").href = `https://www.novelcool.com/search/?wd=${n.title.romaji}`, n.trailer?.id ? (document.getElementById("video_trailer").style.display = "", document.getElementById("video_trailer").src = `https://www.youtube.com/embed/${n.trailer?.id}?autoplay=1`) : document.getElementById("video_trailer").style.display = "none", buildCharacterList(AnalyzeChar(t.mainChar), "main_character_list", "main_character_list_toggle", "Main Character"), buildCharacterList(AnalyzeChar(t.supoChar), "supporting_character_list", "supporting_character_list_toggle", "Suporting Character"), buildCharacterList(AnalyzeChar(t.backChar), "background_character_list", "background_character_list_toggle", "Background Character"), document.getElementById("loading_screen").style.display = "none", document.getElementById("anime_full_detail").style.display = "" } catch (o) { canClick = !0, console.warn(o), document.getElementById("loading_screen").style.display = "none", alert("Unable to search for Anime using your Anime ID") } }; document.body.onkeydown = e => { "Escape" === e.code && document.getElementById("closeButton").click() }, document.getElementById("getAnimeByID").onkeydown = async e => { "Enter" === e.code && canClick && loadInfoByIndex(+e.target.value ? +e.target.value : e.target.value, !1) }, document.getElementById("searchAnimeByIDBtn").onclick = () => { if (canClick) { let e = document.getElementById("getAnimeByID"); loadInfoByIndex(+e.value ? +e.value : e.value, !1) } }, document.getElementById("inputPage").oninput = async e => { let a = +e.target.value?.match(/\d+/g)?.join(""); e.target.value = a ? +a : 0 }, document.getElementById("inputPage").onkeydown = async e => { if ("Enter" === e.code) try { let a = (await (await fetch("./src/data/aniInfo.json")).json()).length; e.target.value = +e.target.value < a / 10 ? e.target.value : Math.floor(a / 10), loadPageList(+e.target.value), localStorage.setItem("currentPage", e.target.value) } catch (t) { alert("This ID is not available!"), canClick = !0 } }, document.getElementById("pageLeft").onclick = async () => { let e = document.getElementById("inputPage"), a = (await (await fetch("./src/data/aniInfo.json")).json()).length; e.value = +e.value - 1 < 0 ? Math.floor(a / 10) : e.value - 1, loadPageList(+e.value), localStorage.setItem("currentPage", e.value) }, document.getElementById("pageRight").onclick = async () => { let e = document.getElementById("inputPage"), a = (await (await fetch("./src/data/aniInfo.json")).json()).length; e.value = +e.value + 1 > a / 10 ? 0 : +e.value + 1, loadPageList(+e.value), localStorage.setItem("currentPage", e.value) }, document.getElementById("applyButton").onclick = async () => { try { let e = document.getElementById("inputPage"), a = (await (await fetch("./src/data/aniInfo.json")).json()).length; e.value = +e.value < a / 10 ? e.value : Math.floor(a / 10), loadPageList(+e.value), localStorage.setItem("currentPage", e.value) } catch (t) { alert("This ID is not available!"), canClick = !0 } }; const updateBackground = () => { let { clientWidth: e, clientHeight: a } = document.body, t = e > a, n = document.getElementById("left_page"), i = document.getElementById("right_page"), r = document.getElementById("full_anime_info"); n.className = t ? "left_info hide_scroll" : "hide_scroll", i.className = t ? "right_info hide_scroll" : "hide_scroll", document.getElementById("preview_image").style.display = t ? "" : "none", r.appendChild(t ? i : n) }; async function startup() { let e = new URLSearchParams(location.search.split("?")[1]), a = { page: +e.get("page"), animeID: +e.get("anime"), no_load_page: e.get("loadpage"), search: e.get("search") }; if ("0" === a.no_load_page); else if (a.page) loadPageList(a.page), document.getElementById("inputPage").value = a.page; else { let t = localStorage.getItem("currentPage"); loadPageList(t ? +t : 0), document.getElementById("inputPage").value = t ? +t : 0 } a.animeID ? loadInfoByIndex(a.animeID, !1) : a.search && loadInfoByIndex(a.search, !1), updateBackground(), window.onresize = updateBackground } startup();